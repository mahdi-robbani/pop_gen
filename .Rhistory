install.packages("HardyWeinberg")
HW.test.Adults
# Exercise 2
library("HardyWeinberg")
Seedlings <- c(AA = 79, AB = 43, BB = 21)
HW.test.Seedlings <- HWChisq(Seedlings, cc = 0, verbose = TRUE)
HW.test.Seedlings
Adults <- c(AA = 70, AB = 60, BB = 13)
HW.test.Adults <- HWChisq(Adults, cc = 0, verbose = TRUE)
HW.test.Adults
HW.test.Seedlings
HW.test.Adults
HW.test.Adults$pval
HW.test.Seedlings$pval
AFR <- c("CC" = 617, "CG" = 41, "GG" = 3)
HW.test.AFR <- HWChisq(AFR, cc = 0, verbose = TRUE)
HW.test.AFR
EUR <- c("CC" = 4, "CG" = 54, "GG" = 445)
HW.test.EUR <- HWChisq(EUR, cc = 0, verbose = TRUE)
HW.test.EUR
knitr::opts_chunk$set(echo = TRUE)
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
coalescencerate = nodecount*(nodecount-1)/2 # calculate the coalescent rate
coalescencetime = rexp(1, rate=coalescencerate) # sample from exponential w. that rate
coalescencetime
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
coalescencerate = nodecount*(nodecount-1)/2 # calculate the coalescent rate
coalescencetime = rexp(1, rate=coalescencerate) # sample from exponential w. that rate
coalescencetime
nodes <- nodes[-tocoalesce] # remove the two nodes that coalesced
nodes <- c(nodes,2*5-length(nodes)-1) # add the new node
nodes # print the new list
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
install.packages("ape")
source("simulatecoalescencetrees.R")
#Run script
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
#load script
source("simulatecoalescencetrees.R")
#Run script
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
#load script
source("simulatecoalescencetrees.R")
#Run script
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
}
#Example of one cycle
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
coalescencerate = nodecount*(nodecount-1)/2 # calculate the coalescent rate
coalescencetime = rexp(1, rate=coalescencerate) # sample from exponential w. that rate
coalescencetime
nodes <- nodes[-tocoalesce] # remove the two nodes that coalesced
nodes <- c(nodes,2*5-length(nodes)-1) # add the new node
nodes # print the new list
#load script
source("simulatecoalescencetrees.R")
#Run script
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
install.packages("ape")
#install.packages("ape")
#Example of one cycle
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
coalescencerate = nodecount*(nodecount-1)/2 # calculate the coalescent rate
coalescencetime = rexp(1, rate=coalescencerate) # sample from exponential w. that rate
coalescencetime
nodes <- nodes[-tocoalesce] # remove the two nodes that coalesced
nodes <- c(nodes,2*5-length(nodes)-1) # add the new node
nodes # print the new list
#load script
source("simulatecoalescencetrees.R")
#Run script
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
#install.packages("ape")
#Example of one cycle
nodes = c(1,2,3,4,5) # make the list and call it nodes
nodes # print the list
nodecount = length(nodes) # save the number of nodes in the variable nodecount
tocoalesce = sample(1:nodecount, size=2) # sample 2 different nodes in node list
nodes[tocoalesce[1]] # print the first node sampled
nodes[tocoalesce[2]] # print the second node sampled
coalescencerate = nodecount*(nodecount-1)/2 # calculate the coalescent rate
coalescencetime = rexp(1, rate=coalescencerate) # sample from exponential w. that rate
coalescencetime
nodes <- nodes[-tocoalesce] # remove the two nodes that coalesced
nodes <- c(nodes,2*5-length(nodes)-1) # add the new node
nodes # print the new list
#load script
source("simulatecoalescencetrees.R")
#Run script
library(ape)
par (mfrow=c(2,5))
for (i in c(1:10)){
print("New Tree")
yourtree <-simtree(5) # simulate tree with 5 nodes
ct<-read.tree(text=yourtree);plot(ct,cex=1.5);add.scale.bar(y=1.2,x=0.2,cex = 2,col = "red",lcol="red",lwd=3)
print(" ")
}
library(coalesceR)
tree<-sim.tree('hudson',10,100000,100000, 1) # last argument: time change for pop size. BUILD A COALESCENT RELATION. TIME IS IN COALESCENT UNITS = 2N
draw.tree(tree)
mut<-add.mutations(tree, 20*1e-5) # change of mutation rate → we observe copies having groups of common mutations
# we have a coalescent tree + information about a mutation (in color + red dots along the tree for higher rat
library(coalesceR)
tree<-sim.tree('hudson',10,100000,100000, 1) # last argument: time change for pop size. BUILD A COALESCENT RELATION. TIME IS IN COALESCENT UNITS = 2N
draw.tree(tree)
mut<-add.mutations(tree, 20*1e-5) # change of mutation rate → we observe copies having groups of common mutations
# we have a coalescent tree + information about a mutation (in color + red dots along the tree for higher rates)
library(coalesceR)
tree<-sim.tree('hudson',10,100000,100000, 1) # last argument: time change for pop size. BUILD A COALESCENT RELATION. TIME IS IN COALESCENT UNITS = 2N
draw.tree(tree)
mut<-add.mutations(tree, 20*1e-5) # change of mutation rate → we observe copies having groups of common mutations
# we have a coalescent tree + information about a mutation (in color + red dots along the tree for higher rates)
#################################Afternoon
library(coalesceR)
#################################Afternoon
library(coalesceR)
install.packages("coalesceR")
###install.packages("ape")
install.packages("coalesceR", repos="http://R-Forge.R-project.org")
#################################Afternoon
library(coalesceR) #package not avilable, I guess run on server
y1 <- function(x){
-x-2
}
y2 <- function(x){
-(x-1)/3
}
plot(y1)
plot(y1, col = "red")
plot(y1, col = "red", xlim = c(-5, 5), ylim=c(-5,5))
plot(y1, col = "red", xlim = c(-10, 10), ylim=c(-10,10))
plot(y2, add = TRUE)
?curve
curve(y1, from = -10, to = 10)
curve(y1, from = -10, to = 10, col = "red")
curve(y2, col = "blue")
curve(y1, from = -10, to = 10, col = "red")
curve(y2, col = "blue", add = TRUE)
curve(y1, from = -5, to = 0, col = "red")
curve(y2, col = "blue", add = TRUE)
curve(y1, from = -4, to = -3, col = "red")
curve(y2, col = "blue", add = TRUE)
curve(y1, from = -5, to = 5, col = "red")
curve(y2, col = "blue", add = TRUE)
y1 <- function(x){
0.5(t-6)
}
curve(y1, from = -10, to = 10, col = "red")
curve(y1, from = -10, to = 10, col = "red")
y1 <- function(x){
0.5(t-6)
}
y1 <- function(x){
0.5(x-6)
}
curve(y1, from = -10, to = 10, col = "red")
curve(y1, from = -10, to = 10, col = "red")
y1 <- function(x){
0.5(x-6)
}
y1 <- function(x){
0.5*(x-6)
}
y1 <- function(x){
0.5*(x-6)
}
curve(y1, from = -10, to = 10, col = "red")
curve(y1, from = -10, to = 10, col = "red")
y2 <- function(x){
-(x-1)/3
}
plot(y1, col = "red", xlim = c(-10, 10), ylim=c(-10,10))
plot(y2, add = TRUE)
curve(y1, from = -5, to = 5, col = "red")
curve(y2, col = "blue", add = TRUE)
curve(y1, from = -10, to = 10, col = "red")
curve(y1, from = 00, to = 10, col = "red")
a = c(3,1,4,1,5,9)
m = mat(a)
m = matrix(a)
m = matrix(a)
m
m = matrix(a, row = 2)
?matrix
m = matrix(a, nrow = 2)
m
m = matrix(a, ncol = 2)
m
a = c(3,4,5,1,1,9)
m = matrix(a, ncol = 2)
m
m = matrix(a, nrow = 2)
m
m = matrix(a, nrow = 3)
m
matrix(a, nrow = 2)
matrix(a, ncol = 3)
matrix(a, ncol = 3).T
matrix(a, ncol = 2)
matrix(a, ncol = 2. byrow = T)
matrix(a, ncol = 2, byrow = T)
matrix(a, ncol = 3, byrow = T)
m2 = matrix(b, ncol = 3, byrow = T)
m2
m2 = matrix(b, ncol = 3, byrow = T)
b = c(3,1,4,1,5,9)
m1 = matrix(a, nrow = 3)
m2 = matrix(b, ncol = 3, byrow = T)
m2
m1*m2
m1
m2*m1
m1*m2
m1
m2
m1 %*% m2
det(m1 %*% m2)
A = matrix(c(3,2,7,1,2,-4,4,0,1), byrow = T, ncol=3)
A
determinant(A)
A = matrix(c(3,1,4,2,2,0,7,-4,1), ncol=3)
A
K = c(4,2,5)
M = c(3,1,4,2,2,0,7,-4,1)
M
M[3:]
M[3,]
M[3]
M[3:6]
M[3:-1]
M[-1:3]
M[-(1:3)]
X = matrix(c(K, M[-(1:3)]), ncol=3)
X
Y = matrix(c(M[1:3], K, M[7:9]), ncol=3)
Y
Z = matrix(c(M[1:6], K), ncol=3)
Z
determinant(X)/determinant(A)
determinant(X)%/%determinant(A)
determinant(X)
determinant(X)$modulus
determinant(X)$modulus[1]
determinant.matrix(X)
determinant(X)$modulus[1]*determinant(X)$sign
dA = determinant(A)$modulus[1]*determinant(A)$sign
dA
dA = determinant(A)$modulus[1]*determinant(A)$sign
dX = determinant(X)$modulus[1]*determinant(X)$sign
dY = determinant(Y)$modulus[1]*determinant(Y)$sign
dZ = determinant(Z)$modulus[1]*determinant(Z)$sign
dX/dA
x = dX/dA
y = dY/dA
z = dZ/dA
3*x +2*y -7*z
Z
dA = determinant(A)$modulus[1]*determinant(A)$sign
dX = determinant(X)$modulus[1]*determinant(X)$sign
dY = determinant(Y)$modulus[1]*determinant(Y)$sign
dZ = determinant(Z)$modulus[1]*determinant(Z)$sign
x = dX/dA
y = dY/dA
z = dZ/dA
3*x +2*y -7*z
K = c(4,2,5)
M = c(3,1,4,2,2,0,-7,-4,1)
A = matrix(M, ncol=3)
X = matrix(c(K, M[-(1:3)]), ncol=3)
Y = matrix(c(M[1:3], K, M[7:9]), ncol=3)
Z = matrix(c(M[1:6], K), ncol=3)
Z
dA = determinant(A)$modulus[1]*determinant(A)$sign
dX = determinant(X)$modulus[1]*determinant(X)$sign
dY = determinant(Y)$modulus[1]*determinant(Y)$sign
dZ = determinant(Z)$modulus[1]*determinant(Z)$sign
x = dX/dA
y = dY/dA
z = dZ/dA
3*x +2*y -7*z
x
y
z
A
X
Y
Z
dA
dX
dY
dZ
x
determinant(matrix(c(2,0,4,2)))$modulus[1]/determinant(matrix(c(2,0,-1,1)))$modulus[1]
determinant(matrix(c(2,0,4,2)))$modulus[1]
matrix(c(2,0,4,2))
determinant(matrix(c(2,0,4,2), nrow=2))$modulus[1]/determinant(matrix(c(2,0,-1,1), nrow=2))$modulus[1]
0.54*0.05/0.25
(0.54*0.05/0.25) + (0.46*0.2/0.025)
(0.54*0.05/0.25) + (0.46*0.2/0.25)
(0.54*0.05/0.54) + (0.46*0.2/0.46)
(0.54*0.05/0.54)/((0.54*0.05/0.54) + (0.46*0.2/0.46))
0.05/0.25
